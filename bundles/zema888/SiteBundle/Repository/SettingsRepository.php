<?php

namespace SiteBundle\Repository;
use SiteBundle\Entity\Settings;

/**
 * SettingsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SettingsRepository extends \Doctrine\ORM\EntityRepository
{
    protected static  $data;

    public function getSetting($alias)
    {
        $this->initData();
        return self::$data[$alias] ?? null;
    }

    protected function initData()
    {
        if (!self::$data) {
            $data = $this->findAll();
            self::$data = array_reduce($data, function ($result, $setting) {
                $result[$setting->getAlias()] = $this->getValue($setting);
                return $result;
            }, []);
        }
    }

    /**
     * @param Settings $setting
     * @return null|Settings|string
     */
    protected function getValue(Settings $setting)
    {
        switch ($setting->getAlias()) {
            case 'policy':
                return $setting;
            case 'adminemail':
                return $setting->getText();
            case 'bodymetrika':
                return $setting->getText();
            case 'headmetrika':
                return $setting->getText();
            case 'robots':
                return $setting->getText();
        }
        return null;
    }

    /**
     * Шаблонизировать мета теги
     *
     * @param string $alias
     * @param $page
     * @return string
     */
    public function renderMetaTemplate($alias, $page, $variables)
    {
        $template = $this->getSetting($alias);
        $variables['H1'] = $page->getH1();
        $variables['MENUTITLE'] = $page->getMenutitle();
        if ($template && preg_match_all('/[$][$]LEVEL(?P<lvl>\d)-/ui', $template, $match)) {
            for ($i = $page->getLvl(); $i > 0 && $i > min($match['lvl']); $i--) {
                $page = $page->getParent();
                $variables['LEVEL' . $page->getLvl() . '-H1'] = $page->getH1();
                $variables['LEVEL' . $page->getLvl() . '-MENUTITLE'] = $page->getMenutitle();
            }
            preg_match_all('/[$][$](?P<variables>[^$]+)[$][$]/', $template, $match);
            foreach ($match['variables'] as $variable) {
                if (!isset($variables[$variable])) {
                    $variables[$variable] = '';
                }
            }
        }
        if ($template) {
            return $this->setVariables($template, $variables);
        }
        return '';
    }

    /**
     * Замена переменных в тексте
     *
     * @param $text
     * @param array $datas
     * @return mixed
     */
    protected function setVariables($text, $datas)
    {
        $parents = [];
        $replaces = [];
        foreach ($datas as $key => $value) {
            $parents[] = '/[$][$]' . strtoupper($key) . '[$][$]/';
            $replaces[] = $value;
        }
        return preg_replace($parents, $replaces, $text);
    }
}
